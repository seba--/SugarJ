/**
 * sdf-desugar implements the following desugarings:
 *
 *   - remove double quotes in String literals: cons, lit
 *   - replace no-attrs by attrs([])
 *   - add quotes to generated quoted stings
 *
 * @author Martin Bravenboer <martin.bravenboer@gmail.com>
 * @author Lennart Kats <lennart add lclnet.nl>
 *
 * copied from
 *   https://svn.strategoxt.org/repos/StrategoXT/spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/sdf-desugar.str
 *   https://svn.strategoxt.org/repos/StrategoXT/strategoxt/trunk/stratego-libraries/aterm/lib/stratego/aterm/Explode.str
 */
module sdf-desugar

imports
  libstrategolib
  Sdf2Renamed

strategies
  
  sdf-desugar =
      io-wrap(topdown(repeat(SdfDesugar); try(SdfDesugarOnce)))

  SdfDesugar :
    no-attrs() -> attrs([])

  SdfDesugar :
    term(default(t)) -> term(t)

rules

  SdfDesugarOnce =
    alltd(EnsureQuotes);
    term(implode-aterm)

  SdfDesugarOnce :
    lit(s) -> lit(<un-double-quote> s)

  SdfDesugarOnce :
    ci-lit(s) -> ci-lit(<un-single-quote> s)
  
  EnsureQuotes :
    quoted(s) -> quoted(<double-quote> s)
    where
      not(<un-double-quote> s)



strategies
  implode-aterm =
       aterm-implode-annotated
    <+ aterm-implode-list
    <+ aterm-implode-int
    <+ aterm-implode-fun
    <+ aterm-implode-appl

rules

  /**
   * list
   */
  aterm-implode-list :
    list(x*) -> <map(implode-aterm)> x*

  /**
   * integer
   */
  aterm-implode-int :
    int(natural(s)) -> <string-to-int> s

  /**
   * just fun
   */
  aterm-implode-fun :
    fun(s1) -> s2#([])
    where
      <aterm-implode-afun> s1 => s2

  /**
   * appl
   */
  aterm-implode-appl :
    appl(s1, x*) -> s2#(<map(implode-aterm)> x*)
    where
      <aterm-implode-afun> s1 => s2

  /**
   * afun
   */
  aterm-explode-afun :
    s -> quoted(s)
    where
      <is-double-quoted> s

  aterm-implode-afun :
    unquoted(s) -> s

  aterm-implode-afun :
    quoted(s) -> s

  /**
   * Anotations
   */
  aterm-implode-annotated :
    annotated(t, default(ts)) -> t'{^ts'}
    where 
      t'  := <implode-aterm> t
    ; ts' := <map(implode-aterm)> ts
