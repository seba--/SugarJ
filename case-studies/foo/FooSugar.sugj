package foo;

import org.sugarj.languages.Java;

/**
 * SugarJ extension that saves one character
 * by introducing a new 'nil' keyword in place
 * of the old four-letter 'null' keyword.
 */
public sugar FooSugar {
  context-free syntax
    "nil" -> JavaLiteral {cons("Foo"), prefer}
    FooTypeId -> JavaTypeName {cons("TypeName"), prefer}
    FooTypeName -> FooTypeId {cons("MyId")}
    
  lexical syntax
    "TYPE" -> FooTypeName
    "TYPE" -> JavaId {reject}
    
  
  signature constructors
    Foo : Literal
    MyId : String -> FooTypeId
  
  desugarings
    \ Foo -> Null \
    \ MyId(s) -> Id("String") \
    
  rules
    sugarj-analyze:
    (ast, path, project-path) -> (ast, errors, warnings, notes)
    with
      editor-init;
      // analyze;
      errors   := <collect-all(constraint-error, conc)> ast;
      warnings := <collect-all(constraint-warning, conc)> ast;
      notes    := <collect-all(constraint-note, conc)> ast

  editor-init =
    // Ensure all dynamic rules are properly scoped
    try(dr-scope-all-end);
    dr-scope-all-start

    constraint-error = foo-check
    constraint-warning = fail
    constraint-note = fail
  
    foo-check :
      Foo -> "don't use nil, stupid"
}