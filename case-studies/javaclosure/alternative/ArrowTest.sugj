package javaclosure.alternative;

import java.util.List;
import java.util.ArrayList;

import javaclosure.alternative.Arrows;
import javaclosure.Transformation;

public class ArrowTest<T>{
	
  public List<T> list;

  public ArrowTest() {
  	list = new ArrayList<T>();
  }
	
  public String toString() {
  	String s = "";
  	
  	for (int i = 0; i < list.size(); i++) {
  		s += list.get(i);
  		
  		if (i < list.size() - 1)
  		  s += ", ";
  	}
  	
  	return s;
  }
  
  public static ArrowTest<Integer> create() {
		ArrowTest<Integer> t = new ArrowTest<Integer>();
		t.list.add(1);
		t.list.add(2);
		t.list.add(3);
		t.list.add(4);
		t.list.add(5);
		return t;
	}
	
	
  public <U> ArrowTest<U> map((T -> U) f) {
	ArrowTest<U> test = new ArrowTest<U>();
		
    for (T t : list)
      test.list.add(f.invoke(t));
      
    return test;
  }
  
  
  
  public static <A,B,C> (A -> C) compose(final (A -> B) f, final (B -> C) g) {
  	return fun (A a) -> C { return g.invoke(f.invoke(a)); };
  }
  
  public static void main(String[] args) {
  	ArrowTest<Integer> t = create();
  	
    System.out.println(t);
    
    (Integer -> Integer) inc = fun (Integer i) -> Integer { return i + 1; };
    System.out.println(t.map(inc));
    
    (Integer -> Double) toDouble = fun (Integer i) -> Double { return i.doubleValue(); };
    System.out.println(t.map(toDouble));
    
    System.out.println(t.map(compose(inc, toDouble)));
  }
}