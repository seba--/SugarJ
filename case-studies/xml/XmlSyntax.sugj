package xml;

/*
 * https://svn.strategoxt.org/repos/StrategoXT/strategoxt/trunk/xml-front/syn/xml/
 */
public sugar XmlSyntax {

%% module xml-attribute
  context-free syntax

    QName "=" AttValue -> Attribute {cons("Attribute")}

  syntax

    "\"" DoubleQuotedPart* "\"" -> <AttValue-CF> {cons("DoubleQuoted")}
    "'"  SingleQuotedPart* "'" -> <AttValue-CF> {cons("SingleQuoted")}

    FooDoubleQuotedText -> DoubleQuotedPart {cons("Literal")}
    FooSingleQuotedText -> SingleQuotedPart {cons("Literal")}

    <DoubleQuotedText-LEX> -> FooDoubleQuotedText
    <SingleQuotedText-LEX> -> FooSingleQuotedText

    <Ref-CF> -> DoubleQuotedPart
    <Ref-CF> -> SingleQuotedPart

  lexical syntax

    ~[\&\<\"]+ -> DoubleQuotedText
    ~[\&\<\']+ -> SingleQuotedText

  lexical restrictions

    DoubleQuotedText -/- ~[\&\<\"]
    SingleQuotedText -/- ~[\&\<\']

%% module xml-text
  lexical syntax
    [\ \t\n\13] -> WhiteSpaceChar

  syntax

    CharDataPart+ -> CharData {cons("Text")}

    FooCharDataText -> CharDataPart {cons("Literal")}
    <Ref-CF> -> CharDataPart
    "<![CDATA[" <CData-LEX> "]]>" -> CharDataPart {cons("CDATASection")}

    <CharDataText-LEX> -> FooCharDataText

  lexical syntax

    ~[\<\&]+ -> CharDataText

  lexical restrictions

    CharDataText -/- ~[\<\&]

  syntax

    "&#"  <NatConst-LEX> ";" -> <DecCharRef-CF> {cons("DecCharRef")}
    "&#x" <HexConst-LEX> ";" -> <HexCharRef-CF> {cons("HexCharRef")}
    "&"   <NCName-LEX>   ";" -> <EntityRef-CF>  {cons("EntityRef")}

  context-free syntax

    DecCharRef -> CharRef
    HexCharRef -> CharRef
    CharRef    -> Ref
    EntityRef  -> Ref

  lexical syntax

    [0-9]+       -> NatConst
    [0-9a-fA-F]+ -> HexConst

  lexical syntax

    (~[\]] | CloseBracket | TwoCloseBrackets )* -> CData

    "]"  -> CloseBracket
    "]]" -> TwoCloseBrackets

  lexical restrictions

    CloseBracket     -/- [\]]
    TwoCloseBrackets -/- [\>]
    CharDataToken    -/- ~[\<\&\]\ \t\n\13]

%% module xml-external

  context-free syntax
    "SYSTEM" SystemLit           -> ExternalID {cons("SystemExternalID")}
    "PUBLIC" PublicLit SystemLit -> ExternalID {cons("PublicExternalID")}
    "PUBLIC" PublicLit           -> PublicID   {cons("PublicID")  }

  lexical syntax

    "\"" ~[\"]* "\""     -> SystemLit
    "'"  ~[\']* "'"     -> SystemLit
    "\"" PubIDChar* "\"" -> PublicLit
    "'"  PubIDChar* "'" -> PublicLit

    [a-zA-Z0-9] -> PubIDChar
    [\ \n\13\-\'\(\)\+\,\.\/\:\=\?\;\!\*\#\@\$\_\%] -> PubIDChar


%% module xml-pi

  context-free syntax
    "<?" PITarget PIChars "?>" -> PI {cons("PI")}

  lexical syntax
    NCName -> PITarget
    [Xx][Mm][Ll] -> PITarget {reject}

    ( ~[\?\>] | ( [\?] ~[\>] ) )* -> PIChars



%% module xml-prolog

  context-free syntax

    XMLDecl? Misc* DocTypePrologue? -> Prologue {cons("Prologue")}
    Misc* -> Epilogue {cons("Epilogue")}
    Comment -> Misc {cons("Comment")}
    PI      -> Misc

  context-free syntax

    "<?xml" VersionInfo EncodingDecl? StandaloneDecl? "?>" -> XMLDecl {cons("XMLDecl")}

    "standalone" "=" StandaloneValue -> StandaloneDecl {cons("StandaloneDecl")}
    "version"    "=" VersionValue    -> VersionInfo    {cons("VersionDecl")}
    "encoding"   "=" EncodingValue   -> EncodingDecl   {cons("EncodingDecl")}

    "\"" YesNo "\"" -> StandaloneValue {cons("Standalone")}
    "'"  YesNo "'" -> StandaloneValue {cons("StandaloneSingle")}

    "\"" EncodingName "\"" -> EncodingValue {cons("Encoding")}
    "'"  EncodingName "'" -> EncodingValue {cons("EncodingSingle")}

    "\"" VersionNum "\"" -> VersionValue {cons("Version")}
    "'"  VersionNum "'"  -> VersionValue {cons("VersionSingle")}

  context-free syntax

    DocTypeDecl Misc* -> DocTypePrologue {cons("DocTypePrologue")}

    "<!DOCTYPE" QName ExternalID ">" -> DocTypeDecl {cons("DocTypeDecl")}

  lexical syntax

    [a-zA-Z0-9\_\.\:\-]+ -> VersionNum
    [A-Za-z] [A-Za-z0-9\.\_\-]* -> EncodingName

    "yes" -> YesNo
    "no"  -> YesNo


%% module xml-document

  sorts Document Element Content
  context-free syntax

    Prologue Element Epilogue -> Document {cons("Document")}

    "<" QName Attribute* "/>" -> Element {cons("EmptyElement")}

    Element -> Content
    Comment -> Content {cons("Comment")}
    PI      -> Content
  syntax

    CharData      -> <Content-CF>
    CDataSection  -> <Content-CF>

  context-free syntax
    "<" QName Attribute* ">"
      Content* 
    "</" QName ">"
    -> Element {cons("Element")}


%% module xml-names

  context-free syntax
    Qualifier? NCName -> QName     {cons("QName")}
    NCName ":"        -> Qualifier {cons("Prefix")}
    
    "{" NamespaceURI "}" -> Qualifier {cons("URIPrefix")}

  lexical syntax
    [A-Za-z\_] [A-Za-z0-9\.\-\_]* -> NCName
    [a-zA-Z0-9\_\-\:\/\.]+ -> NamespaceURI

  lexical restrictions
    NCName -/- [A-Za-z0-9\.\-\_]

%% module xml-comments

  lexical syntax
    "<!--" (~[\-] | Dash)* "-->" -> Comment
    "-" -> Dash

  lexical restrictions

    Dash -/- [\-]

%% module xml-whitespace

  lexical syntax
    [\ \t\n\13] -> LAYOUT

  context-free restrictions
    LAYOUT? -/- [\ \t\n\13]




	signature
	  constructors
	                     : CharData -> Content
	                     : PI -> Content
	    Comment          : Comment -> Content
	                     : Element -> Content
	    Element          : QName * List(Attribute) * List(Content) * QName -> Element
	    EmptyElement     : QName * List(Attribute) -> Element
	    Document         : Prologue * Element * Epilogue -> Document
	                     : String -> FooSingleQuotedText
	                     : String -> FooDoubleQuotedText
	                     : Ref -> SingleQuotedPart
	    Literal          : FooSingleQuotedText -> SingleQuotedPart
	                     : Ref -> DoubleQuotedPart
	    Literal          : FooDoubleQuotedText -> DoubleQuotedPart
	    SingleQuoted     : List(SingleQuotedPart) -> AttValue
	    DoubleQuoted     : List(DoubleQuotedPart) -> AttValue
	    Attribute        : QName * AttValue -> Attribute
	                     : EntityRef -> Ref
	                     : CharRef -> Ref
	                     : HexCharRef -> CharRef
	                     : DecCharRef -> CharRef
	    EntityRef        : String -> EntityRef
	    HexCharRef       : String -> HexCharRef
	    DecCharRef       : String -> DecCharRef
	                     : String -> FooCharDataText
	    CDATASection     : String -> CharDataPart
	                     : Ref -> CharDataPart
	    Literal          : FooCharDataText -> CharDataPart
	    Text             : List(CharDataPart) -> CharData
	    DocTypeDecl      : QName * ExternalID -> DocTypeDecl
	    DocTypePrologue  : DocTypeDecl * List(Misc) -> DocTypePrologue
	    VersionSingle    : VersionNum -> VersionValue
	    Version          : VersionNum -> VersionValue
	    EncodingSingle   : EncodingName -> EncodingValue
	    Encoding         : EncodingName -> EncodingValue
	    StandaloneSingle : YesNo -> StandaloneValue
	    Standalone       : YesNo -> StandaloneValue
	    EncodingDecl     : EncodingValue -> EncodingDecl
	    VersionDecl      : VersionValue -> VersionInfo
	    StandaloneDecl   : StandaloneValue -> StandaloneDecl
	    XMLDecl          : VersionInfo * Option(EncodingDecl) * Option(StandaloneDecl) -> XMLDecl
	                     : PI -> Misc
	    Comment          : Comment -> Misc
	    Epilogue         : List(Misc) -> Epilogue
	    Prologue         : Option(XMLDecl) * List(Misc) * Option(DocTypePrologue) -> Prologue
	    PublicExternalID : PublicLit * SystemLit -> ExternalID
	    SystemExternalID : SystemLit -> ExternalID
	    PI               : PITarget * PIChars -> PI
	                     : String -> YesNo
	                     : String -> EncodingName
	                     : String -> VersionNum
	                     : String -> PublicLit
	                     : String -> SystemLit
	                     : String -> PIChars
	                     : String -> PITarget
	    Prefix           : NCName -> Qualifier
	    URIPrefix        : NamespaceURI -> Qualifier
	    QName            : Option(Qualifier) * NCName -> QName
	                     : String -> NCName
	                     : String -> Comment

}