package xml;

import concretesyntax.ConcreteJava;

import eblock.EBlock;

import org.sugarj.languages.Java;

import xml.XmlJavaSyntax;
import xml.XmlSyntax;
import xml.XmlTextTools;

/*
 * https://svn.strategoxt.org/repos/StrategoXT/java-borg/trunk/trans/java-xml/meta-explode-sax.str
 */
public sugar AsSax {

  desugarings
    meta-explode-sax

	%%  module meta-explode-sax
	
	strategies
	
	  
	  meta-explode-sax =
	    alltd(explode-write; meta-explode-sax)
	
	  explode-write :
	    ToMetaStm(WriteDoc(Id(x), c)) -> java_bstm |[ { java_bstm* } ]|
	      where < content-to-stm(|x)
	            ; concat-content
	            ; flatten-list
	            > c => java_bstm*
	
	  content-to-stm(|java_x) :
	    Document(_,c,_) -> 
	      java_bstm* |[
	         java_x.startDocument();
	         ~*bstm*
	         java_x.endDocument();
	      ]|
	      where <content-to-stms(|java_x)> c => bstm*
	
	  /**
	   * @todo  Support namespaces
	   */
	  content-to-stm(|java_x) :
	    Element(QName(pref, n), atts, children, QName(pref, n)) ->
	      java_bstm* |[
	         org.xml.sax.helpers.AttributesImpl java_y = new org.xml.sax.helpers.AttributesImpl();
	         ~*bstm1*
	         java_x.startElement(~<java-string-prefix> pref, ~<java-string-expr> n, ~<java-string-qname> (pref,n), java_y);
	         ~*bstm2*
	         java_x.endElement(~<java-string-prefix> pref, ~<java-string-expr> n, ~<java-string-qname> (pref,n));
	      ]|
	      where <map(content-to-stms(|java_x))> children => bstm2*
	          ; new => java_y
	          ; <map(attribute-to-stm(|java_y))> atts => bstm1*
	
	   content-to-stm(|java_x) :
      EmptyElement(QName(pref, n), atts) ->
        java_bstm* |[
           org.xml.sax.helpers.AttributesImpl java_y = new org.xml.sax.helpers.AttributesImpl();
           ~*bstm1*
           java_x.startElement(~<java-string-prefix> pref, ~<java-string-expr> n, ~<java-string-qname> (pref, n), java_y);
           java_x.endElement(~<java-string-prefix> pref, ~<java-string-expr> n, ~<java-string-qname> (pref, n));
        ]|
        where new => java_y
            ; <map(attribute-to-stm(|java_y))> atts => bstm1*
	
	  content-to-stm(|java_x) :
	    TextFromMetaExpr(java_e) ->
	    java_bstm |[
	      java_x.characters({|
	        String java_y = java_e; | java_y.toCharArray()
	      |}, 0, java_y.length());
	    ]|
	      where new => java_y
	
	  /**
	   * @todo  Escape the special characters in the String.
	   * @todo  Support namespaces
	   */
	  attribute-to-stm(|java_y) :
	    Attribute(QName(pref, n), v) -> java_bstm |[ java_y.addAttribute(~<java-string-prefix> pref, ~<java-string-expr> n, ~<java-string-qname> (pref, n), "CDATA", java_e); ]|
	      where <attribute-value-to-expr> v => java_e
	
	  attribute-value-to-expr :
	    v -> <java-string-exprs> s
	      where <xml-attr-value2strings> v => s
	
	  /**
	   * Anti-quotation of attribute value to Java.
	   */
	  attribute-value-to-expr :
	    FromMetaExpr(e) -> e
	
	  /**
	   * @todo  Handle all escaped characters
	   */
	  content-to-stm(|java_x) :
	    Text(s) ->
	      java_bstm* |[
	        java_x.characters(new char[]{java_e*}, 0, java_i);
	      ]|
	      where <chardata2string; explode-string> Text(s) => cs
	          ; <length; int-to-string> cs => java_i
	          ; <map(
	                \ '\n' -> |[ '\n' ]| \
	             <+ \ '\r' -> |[ '\r' ]| \
	             <+ \ c    -> <java-char-expr> c \)
	             > cs => java_e*
	
	  content-to-stms(|x) =
	    content-to-stm(|x); (is-list <+ ![<id>])
	
	  concat-content =
	    bottomup( try( \ Conc(l1, l2) -> <conc> (l1, l2) \ ))
    
    
  rules
    java-string-prefix :
      None -> <java-string-expr> ""
    
    java-string-prefix :
      Some(Prefix(pref)) -> <java-string-expr> ""

    java-string-prefix :
      Some(URIPrefix(pref)) -> <java-string-expr> pref
  
  rules
    java-string-qname :
      (None, name) -> <java-string-expr> name
    
    java-string-qname :
      (Some(Prefix(pref)), name) -> <concat-strings; java-string-expr> [pref, ":", name]
    
    java-string-qname :
      (Some(URIPrefix(pref)), name) -> <concat-strings; java-string-expr> ["{", pref, "}", name] 
      
      
}