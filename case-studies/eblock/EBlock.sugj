package eblock;

import org.sugarj.languages.Java;

import eblock.ConcatIds;

/*
 * https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax-embedding/languages/java/eblock/Main.sdf
 * https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/lib/java/postprocess/java-lift-eblocks.str
 */
public sugar EBlock {
	context-free syntax
    "{|" JavaBlockStm* "|" JavaExpr "|}" -> JavaExpr {cons("PreEBlock")}
    "{|" JavaExpr "|" JavaBlockStm* "|}" -> JavaExpr {cons("PostEBlock")}
    "{|" JavaBlockStm* "|}"              -> JavaBlockStm {cons("InnerBlock")}

    "{|" JavaBlockStm* "|" JavaExpr "|" JavaBlockStm* "|}" -> JavaExpr {cons("PrePostEBlock")}
  
  
  signature constructors
    PreEBlock : List(JavaBlockStm) * JavaExpr -> JavaExpr
    PostEBlock : JavaExpr * List(JavaBlockStm) -> JavaExpr
    InnerBlock : List(JavaBlockStm) -> JavaBlockStm
    PrePostEBlock : List(JavaBlockStm) * JavaExpr * List(JavaBlockStm) -> JavaExpr
  
  
	/*
	
	Semantics that this transformation gives to e-blocks (is somewhat dubious):
	
	   Plus(PreEBlock([Assign(x1, e1)], PostEBlock(e2, [Assign(x3,e3)])),
	        PreEBlock([Assign(x4, e4)], PostEBlock(e5, [Assign(x6,e6)])))
	
	->
	
	   [Assign(x1, e1),
	    Assign(x4, e4),
	    Plus(e2, e5),
	    Assign(x3, e3),
	    Assign(x6, e6)]
	
	with left-to-right evaluation would we not expect the x3 assignment to happen
	before the x4 assignment?
	
	*/
	
	desugarings
	  java-lift-eblocks
	
	strategies
	
	  java-lift-eblocks =
	    bottomup(try( java-desugar-prepostblock <+ java-lift-to-block-level ))
	
	  java-desugar-prepostblock :
	    PrePostEBlock(pre, expr, post) -> PreEBlock(pre, PostEBlock(expr, post) )
	
	  java-lift-to-block-level = 
	        java-lift-from-blocks 
	    <+  java-lift-from-constructor-blocks
	    <+  java-lift-from-switchgroup-blocks
	  
	  java-lift-from-blocks : 
	    Block(bstm1*) -> Block(bstm2*)
	    with bstm2* := <try(mapconcat(java-local-lift-eblocks))> bstm1*
	
	  java-lift-from-constructor-blocks :
	    ConstrBody(x, bstm1*) -> ConstrBody(x, bstm2*) 
	    with bstm2* := <try(mapconcat(java-local-lift-eblocks))> bstm1*
	
	  java-lift-from-switchgroup-blocks :
	    SwitchGroup(x, bstm1*) -> SwitchGroup(x, bstm2*)
	    with bstm2* := <try(mapconcat(java-local-lift-eblocks))> bstm1*
	      
	  /**
	   * @todo  Nested EBlocks?
	   * @todo  Nested Blocks?
	   * @todo  Is Block the only block level element?
	   * @todo  Anonymous inner classes?
	   */
	  java-local-lift-eblocks =
	      java-collect-split-om-pre-eblock
	    ; ?(<id>, pre-stms)
	    ; java-collect-split-om-post-eblock
	    ; ?(t, post-stms)
	    ; if !post-stms => []; !pre-stms => [] then
	        ![t]
	      else 
	        <concat> [<mapconcat(java-local-lift-eblocks)> pre-stms, <java-local-lift-eblocks> t, <mapconcat(java-local-lift-eblocks)> post-stms]
	      end
	
	  java-collect-split-om-pre-eblock =
	    rules( JavaPreEBlocks := [] )
	    ; alltd(java-lift-pre-eblock)
	    ; !(<id>,<JavaPreEBlocks>)
	
	  java-lift-pre-eblock :
	    PreEBlock(bstm*, e) -> e
	    with rules( JavaPreEBlocks := <conc>(bstm*, <JavaPreEBlocks>) )
	
	  java-collect-split-om-post-eblock =
	    rules( JavaPostEBlocks := [] )
	    ; alltd(java-lift-post-eblock)
	    ; !(<id>,<JavaPostEBlocks>)
	
	  java-lift-post-eblock :
	    PostEBlock(e, bstm*) -> e
	    with rules( JavaPostEBlocks := <conc>(bstm*, <JavaPostEBlocks>) )
	
}
