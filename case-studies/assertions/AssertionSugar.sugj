package assertions;

import org.sugarj.languages.Stratego;

import concretesyntax.ConcreteStratego;

public sugar AssertionSugar {

  lexical syntax
    "assertions" -> StrategoKeyword
    "assertion" -> StrategoKeyword

  context-free syntax
    "assertions" StrategoStrategy* -> Transformation {cons("Assertions")}  

    "assertion" "rules" Assertion* -> Transformation {cons("AssertionRules")}  

    StrategoId ":" StrategoTerm "->" StrategoTerm StrategoRuleCond*  -> Assertion {cons("Assertion")}
  
  signature constructors
    Assertions : List(Strategy) -> Transformation
    AssertionRules : List(Assertion) -> Transformation
    Assertion : StrategoId * StrategoTerm * StrategoTerm * List(StrategoRuleCond) -> Assertion
  
  lexical restrictions
    "assertions" -/- [a-zA-Z0-9\'\-\_]
    "assertion" -/- [a-zA-Z0-9\'\-\_]

  
  rules
    assertions-to-desugarings :
      Assertions(as) -> Desugarings(<map(!PureDesugaring(<id>))> as)

    assertionrules-to-stratego :
    	AssertionRules(as) -> Rules(<map(assertion-to-stratego)> as) 

    assertion-to-stratego :
    	Assertion(name, pre-assertion, assertion, conditions) -> rule
    	where
        !|[ <\ term~pre-assertion -> "" \> t;
            <\ term~assertion -> t \
                <+ compile-error(|<conc-strings> ("assertion ", string~name, " failed"))> t => t' ]| => assertion-cond;
    	  !RDefNoArgs(name, Rule(Var("t"), Var("t'"), [WhereClause(assertion-cond) | conditions])) => rule


  desugarings
    assertions-to-desugarings
    assertionrules-to-stratego
}